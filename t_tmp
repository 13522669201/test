--------生成wz表-------------------------------
SELECT T7129S6.KEY_ID,T7129S6.SERVERID,T7129S6.REGIONID,T7129S6.CREATEDATE,T7129S6.D_STATUS,T7129S6.D_VERSION,
 T7129S6.UP_DATE,T7129S6.BATCHID,T7129S1.F1 AS F1,T7129S6.F2,T7129S2.F2 AS F3,T7129S6.F4,FMT_INDEX_TYPE_1.TYPENAME AS F5,
 FMT_INDEX_TYPE_2.TYPENAME AS F6,T7129S4.F1 AS F7,T7129S6.F8,T7129S6.F9,T7129S6.F10,T7129S6.F11,
 FMT_INDEX_TYPE_3.TYPENAME AS F12,T7129S3.F3 AS F13,FMT_INDEX_TYPE_4.TYPENAME AS F14,T7129S6.F15,T7129S6.F16,
 T7129S6.F17,T7129S6.F18,FMT_INDEX_TYPE_5.TYPENAME AS F19,T7129S6.F20,T7129S6.F21
 FROM (SELECT DISTINCT * FROM T7129S6 ) T7129S6
 LEFT JOIN T7129S1 ON T7129S6.F1=T7129S1.KEY_ID
 LEFT JOIN T7129S2 ON T7129S6.F3=T7129S2.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE FMT_INDEX_TYPE_1 ON T7129S6.F5=FMT_INDEX_TYPE_1.TYPEID
 LEFT JOIN FMT_INDEX_TYPE FMT_INDEX_TYPE_2 ON T7129S6.F6=FMT_INDEX_TYPE_2.TYPEID
 LEFT JOIN T7129S4 ON T7129S6.F7=T7129S4.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE FMT_INDEX_TYPE_3 ON T7129S6.F12=FMT_INDEX_TYPE_3.TYPEID
 LEFT JOIN T7129S3 ON T7129S6.F13=T7129S3.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE FMT_INDEX_TYPE_4 ON T7129S6.F14=FMT_INDEX_TYPE_4.TYPEID
 LEFT JOIN FMT_INDEX_TYPE FMT_INDEX_TYPE_5 ON T7129S6.F19=FMT_INDEX_TYPE_5.TYPEID

SELECT T7129S7.KEY_ID,T7129S7.SERVERID,T7129S7.REGIONID,T7129S7.CREATEDATE,T7129S7.D_STATUS,T7129S7.D_VERSION,
 T7129S7.UP_DATE,T7129S7.BATCHID,T7129S1.F1 AS F1,T7129S7.F2,T7129S7.F3,T7129S7.F4,FMT_INDEX_TYPE_bak_1.TYPENAME AS F5,
 FMT_INDEX_TYPE_bak_2.TYPENAME AS F6,T7129S4.F1 AS F7,T7129S7.F8,T7129S7.F9,T7129S7.F10,DBO.GETMEDICINENAMELIST(T7129S7.F11) AS F11,
 T7129S7.F12,T7129S7.F13,FMT_INDEX_TYPE_bak_3.TYPENAME AS F14,T7129S3.F3 AS F15,FMT_INDEX_TYPE_bak_4.TYPENAME AS F16,
 T7129S7.F17,T7129S7.F18,T7129S7.F19,T7129S7.F20,FMT_INDEX_TYPE_bak_5.TYPENAME AS F21,
 T7129S7.F22,T7129S7.F23,DBO.GETMEDICINENAMELIST(T7129S7.F24) AS F24,FMT_INDEX_TYPE_bak_6.TYPENAME AS F25,T7129S7.F26
 into T7129S7_WZ
 FROM
 (SELECT DISTINCT * FROM T7129S7) T7129S7
 LEFT JOIN T7129S1 ON T7129S7.F1=T7129S1.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_1 ON T7129S7.F5=FMT_INDEX_TYPE_bak_1.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_2 ON T7129S7.F6=FMT_INDEX_TYPE_bak_2.TYPEID
 LEFT JOIN T7129S4 ON T7129S7.F7=T7129S4.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_3 ON T7129S7.F14=FMT_INDEX_TYPE_bak_3.TYPEID
 LEFT JOIN T7129S3 ON T7129S7.F15=T7129S3.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_4 ON T7129S7.F16=FMT_INDEX_TYPE_bak_4.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_5 ON T7129S7.F21=FMT_INDEX_TYPE_bak_5.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_6 ON T7129S7.F25=FMT_INDEX_TYPE_bak_6.TYPEID



 SELECT T7129S8.KEY_ID,T7129S8.SERVERID,T7129S8.REGIONID,T7129S8.CREATEDATE,T7129S8.D_STATUS,T7129S8.D_VERSION,
 T7129S8.UP_DATE,T7129S8.BATCHID,T7129S1.F1 AS F1,T7129S8.F2,T7129S2.F2 AS F3,T7129S8.F4,FMT_INDEX_TYPE_bak_1.TYPENAME AS F5,
 DBO.GETMEDICINENAMELIST1(T7129S8.F6) AS F6,FMT_INDEX_TYPE_bak_2.TYPENAME AS F7,T7129S4.F1 AS F8,T7129S8.F9,T7129S8.F10,T7129S8.F11,
 T7129S8.F12,FMT_INDEX_TYPE_bak_3.TYPENAME AS F13,T7129S3.F3 AS F14,FMT_INDEX_TYPE_bak_4.TYPENAME AS F15,T7129S8.F16,
 T7129S8.F17,T7129S8.F18,T7129S8.F19,FMT_INDEX_TYPE_bak_5.TYPENAME AS F20,T7129S8.F21,T7129S8.F22
 into T7129S8_WZ
 FROM T7129S8_dis T7129S8
 LEFT JOIN T7129S1 ON T7129S8.F1=T7129S1.KEY_ID
 LEFT JOIN T7129S2 ON T7129S8.F3=T7129S2.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_1 ON T7129S8.F5=FMT_INDEX_TYPE_bak_1.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_2 ON T7129S8.F7=FMT_INDEX_TYPE_bak_2.TYPEID
 LEFT JOIN T7129S4 ON T7129S8.F8=T7129S4.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_3 ON T7129S8.F13=FMT_INDEX_TYPE_bak_3.TYPEID
 LEFT JOIN T7129S3 ON T7129S8.F14=T7129S3.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_4 ON T7129S8.F15=FMT_INDEX_TYPE_bak_4.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_5 ON T7129S8.F20=FMT_INDEX_TYPE_bak_5.TYPEID



SELECT T7129S9.KEY_ID,T7129S9.SERVERID,T7129S9.REGIONID,T7129S9.CREATEDATE,T7129S9.D_STATUS,T7129S9.D_VERSION,
 T7129S9.UP_DATE,T7129S9.BATCHID,T7129S1.F1 AS F1,T7129S9.F2,T7129S9.F3,T7129S9.F4,FMT_INDEX_TYPE_bak_1.TYPENAME AS F5,
 DBO.GETMEDICINENAMELIST(T7129S9.F6) AS F6,FMT_INDEX_TYPE_bak_2.TYPENAME AS F7,T7129S4.F1 AS F8,T7129S9.F9,T7129S9.F10,T7129S9.F11,
 T7129S9.F12,T7129S9.F13,FMT_INDEX_TYPE_bak_3.TYPENAME AS F14,T7129S3.F3 AS F15,FMT_INDEX_TYPE_bak_4.TYPENAME AS F16,
 T7129S9.F17,T7129S9.F18,T7129S9.F19,T7129S9.F20,FMT_INDEX_TYPE_bak_5.TYPENAME AS F21,
 T7129S9.F22,T7129S9.F23,DBO.GETMEDICINENAMELIST(T7129S9.F24) AS F24,FMT_INDEX_TYPE_bak_6.TYPENAME AS F25,T7129S9.F26
 into  T7129S9_WZ
 FROM (SELECT DISTINCT * FROM T7129S9) T7129S9
 LEFT JOIN T7129S1 ON T7129S9.F1=T7129S1.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_1 ON T7129S9.F5=FMT_INDEX_TYPE_bak_1.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_2 ON T7129S9.F7=FMT_INDEX_TYPE_bak_2.TYPEID
 LEFT JOIN T7129S4 ON T7129S9.F8=T7129S4.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_3 ON T7129S9.F14=FMT_INDEX_TYPE_bak_3.TYPEID
 LEFT JOIN T7129S3 ON T7129S9.F15=T7129S3.KEY_ID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_4 ON T7129S9.F16=FMT_INDEX_TYPE_bak_4.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_5 ON T7129S9.F21=FMT_INDEX_TYPE_bak_5.TYPEID
 LEFT JOIN FMT_INDEX_TYPE_bak FMT_INDEX_TYPE_bak_6 ON T7129S9.F25=FMT_INDEX_TYPE_bak_6.TYPEID

 ----------------------------------------------------------------------------
-- JGCJ_JGQKB_WZ01--合并

create table JGCJ_JGQKB_WZ01 as
select F1 from T7129S6_WZ group by F1
union all
select F1 from T7129S7_WZ group by F1
union all
select F1 from T7129S8_WZ group by F1
union all
select F1 from T7129S9_WZ group by F1
-- JGCJ_JGQKB_WZ02--去重

create table JGCJ_JGQKB_WZ02 as
select distinct F1 from JGCJ_JGQKB_WZ01

-- JGCJ_JGQKB_WZ03--安名称语句生成关系表  附加jg编码
--JGCJ_JGQKB_kqc去重复
select * from JGCJ_JGQKB_kqc where jgmc in
(select jgmc from JGCJ_JGQKB_kqc group by jgmc having count(1)>1)
order by jgmc
delete from JGCJ_JGQKB_kqc where jgbm in(
44132202,
44510002,
44510004,
44142202,
44190006,
44078513,
44142301,
44122502,
44182102,
44010101,
441521,
44160101,
44078403,
44122402,
44130202,
44070005,
44078320,
44162302,
44158102,
44528103,
44180302,
44020101,
44000009,
44030003,
440901,
445201,
44082301,
44070003,
44078103,
44078124,
441424,
44070512,
44148103,
44182302,
44120003,
44200003,
44040002,

44538122,
44532217,
44532218,
44530001

)
--验证
select jgmc,count(1) from JGCJ_JGQKB_kqc group by jgmc having count(1)>1;
--生成JGCJ_JGQKB_WZ03
drop table JGCJ_JGQKB_WZ03
create table JGCJ_JGQKB_WZ03 as
select jcsjid.nextval as id ,t2.f1 ,t3.jgbm from JGCJ_JGQKB_WZ02 t2
left join JGCJ_JGQKB_kqc t3 on t2.f1=t3.jgmc
where t2.f1 is not null
--人工得到改名的编码--------------------
MERGE INTO t_tmp t_tmp1
USING (select t1.*,t2.jgbm from t_tmp t1 left join JGCJ_JGQKB_kqc t2 on trim(t1.jgmc1)=t2.jgmc) t_tmp2
ON (t_tmp1.id=t_tmp2.id)
WHEN MATCHED THEN
    UPDATE  SET jgbm1 = t_tmp2.jgbm

select * from sys_user where username='mxnyjj441403';
select * from t_tmp for update;
select * from JGCJ_JGQKB_kqc where fzrxm='伍莉婷';


--JGCJ_JGQKB_WZ04 ==JGCJ_JGQKB_WZ03  t_tmp 合并得到=旧系统中的机构对应新系统的机构编码-------------------------------------------------------
select * from t_tmp;
select * from sys_user;
--------最终结果-------------------------------
create table JGCJ_JGQKB_WZ as
select t.id,t.f1 jgmc, case when t.jgbm is null then t1.jgbm1 else t.jgbm end jgbm from JGCJ_JGQKB_WZ03 t
left join t_tmp t1 on t.f1=trim(t1.jgmc0)
-----------------------------------------
1.如果HashMap未被初始化过，则初始化
2.对Key求Hash值，然后再计算下标
3.如果没有碰撞，直接放入桶中
4.如果碰撞了，以链表的方式链接到后面
5.如果链表长度超过阀值8，就把链表转成红黑树
6.如果链表长度低于6，就把红黑树转回链表
7.如果节点已经存在就替换旧值
8.如果桶满了(容量16*加载因子0.75)，就需要resize(扩容2倍后重排）


1.计算hash值
2.找到对应的位置，根据情况进行∶
2.1直接取值
2.2红黑树里找值
2.3遍历链表取值
3.返回找到的结果\

1.结构
2.Hash碰撞（put）
3.并发安全
4.查询复杂度
5.为什么超过8要转为红黑树?1 链表比红黑树存储空间小 2. 想要启动红黑树的概率是 千万分之一，可以看concrrentHashMap源码注释。


阻塞方法
	take()：读取并移除，空了则阻塞
	put(): 插入，满了则阻塞

add, remove, element:返回队列头元素，如果空  满了  则抛异常。
offer, poll：取出并删除, peek：取出

[root@localhost ~]# fdisk /dev/sda
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p):
Using default response p
分区号 (3,4，默认 3)：
起始 扇区 (83886080-1048575999，默认为 83886080)：
将使用默认值 83886080
Last 扇区, +扇区 or +size{K,M,G} (83886080-1048575999，默认为 1048575999)：+85G
分区 3 已设置为 Linux 类型，大小设为 85 GiB

命令(输入 m 获取帮助)：w
The partition table has been altered!

Calling ioctl() to re-read partition table.

[root@localhost ~]# partprobe

[root@localhost ~]# lvm
lvm> pvcreate /dev/sda3
  Physical volume "/dev/sda3" successfully created.

vgextend  /dev/sda3 /dev/sda4



